import random
import sqlite3
import time
import webbrowser
from datetime import date

import telebot
from telebot import types

from config import *

# //////////////////////////////////////////////////////////////////////////////////////////////////////
# *---------------------------------------- Application -----------------------------------------------*
# /////////////////////////////////////////////////////////////////////////////////////////////////////

# <<<<<<<<<<<<<<<< –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ >>>>>>>>>>>>>>>>>
bot = telebot.TeleBot(BOT_TOKEN)


def first_visit(message, user_name):
    con = sqlite3.connect('files/database.sqlite')
    cur = con.cursor()
    cur.execute(f"update user_info set do_play = 'yes'")
    con.commit()

    bot.send_message(message.from_user.id,
                     f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤, {user_name}!')
    bot.send_message(message.from_user.id, TEXT_what_is_it)
    bot.send_message(message.from_user.id,
                     '–ï—Å–ª–∏ —è —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª, —Ç–æ –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º? :)',
                     reply_markup=marcup_start)


def start_conversation(message, user_name):
    bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, {user_name}!',
                     reply_markup=marcup_start)


@bot.message_handler(commands=['start'])
def start(message):
    con = sqlite3.connect('files/database.sqlite')
    cur = con.cursor()
    cur.execute(
        "create table if not exists user_dreams(dream_name text, dream_story text, dream_notes text, dream_category text, dream_phase text, dream_date text)")
    cur.execute("create table if not exists user_info(do_play text)")
    cur.execute(f"INSERT INTO user_info(do_play) VALUES('no')")
    con.commit()
    do_play = cur.execute('select do_play from user_info').fetchall()
    user_name = message.from_user.first_name

    if do_play[0][0] == "yes":
        start_conversation(message, user_name)
    else:
        first_visit(message, user_name)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text.lower() in ['* –Ω–æ–≤—ã–π —Å–æ–Ω *', '—Å–æ–Ω']:
        with open('files/broker.txt', 'w', encoding='utf-8') as file:
            file.write('')

        bot.send_message(message.from_user.id,
                         '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º –Ω–æ–≤–æ–µ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–µ!')
        sent = bot.send_message(message.from_user.id,
                                '–°–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ —Ç—ã –Ω–∞–∑–∞–≤–µ—à—å —Å–≤–æ–π —Å–æ–Ω:')
        bot.register_next_step_handler(sent, add_dream_name)

    elif message.text.lower() in ['* –∏—Å—Ç–æ—Ä–∏—è —Å–Ω–æ–≤ *', '–∏—Å—Ç–æ—Ä–∏—è', '–≤—Å–µ —Å–Ω—ã',
                                  '—Å–Ω—ã']:
        history(message)

    elif message.text.lower() in ['* –º–µ–Ω—é *', '–º–µ–Ω—é']:
        marcup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        marcup.add(types.KeyboardButton('* –°–±—Ä–æ—Å'))
        bot.send_message(message.from_user.id, '–í–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é üåô',
                         reply_markup=marcup_start)

    elif message.text.lower() in ['* –¥–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤? *',
                                  '—á—Ç–æ —ç—Ç–æ', '—á—Ç–æ —ç—Ç–æ?']:
        bot.send_message(message.from_user.id, TEXT_what_is_it, reply_markup=marcup_start)

    elif message.text.lower() in ['* —Å–±—Ä–æ—Å *', '—Å–±—Ä–æ—Å', '—Å–±—Ä–æ—Å–∏—Ç—å']:
        marcup = types.InlineKeyboardMarkup()
        marcup.add(
            types.InlineKeyboardButton(text='‚úÖ', callback_data='**delete'),
            types.InlineKeyboardButton(text='‚ùå', callback_data='**no_delete'))
        bot.send_message(message.from_user.id,
                         '‚ö†Ô∏è –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–≤–æ–∏—Ö —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π?Ô∏è',
                         reply_markup=marcup)
    elif message.text.lower == '* —á—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∞–∑–∞ (–æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è)? *':
        bot.send_message(message.from_user.id, '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç... ‚û°Ô∏è')
        webbrowser.open(
            'https://trends.rbc.ru/trends/social/625ff3129a794715283cdc6a',
            new=2)

    else:
        bot.send_message(message.from_user.id,
                         '–ò–∑–≤–∏–Ω–∏, –Ω–æ —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª :(\n–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚û°',
                         reply_markup=marcup_start)


def add_dream_name(message):
    cur = sqlite3.connect('files/database.sqlite').cursor()
    names = cur.execute('select dream_name from user_dreams').fetchall()

    while True:
        if message.text.count('*') == 2:
            sent = bot.send_message(message.from_user.id,
                                    '–í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 2 –∑–Ω–∞–∫–∞ "*", –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–∞:')
            bot.register_next_step_handler(sent, add_dream_name)
            break
        elif message.text.capitalize() in [i[0] for i in names]:
            sent = bot.send_message(message.from_user.id,
                                    '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–Ω —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–µ:')
            bot.register_next_step_handler(sent, add_dream_name)
            break
        else:
            write_to_broker(message.text)
            sent = bot.send_message(message.from_user.id, '–ö–∞–∫–æ–π —Å—é–∂–µ—Ç:')
            bot.register_next_step_handler(sent, add_dream_story)
            break


def add_dream_story(message):
    write_to_broker(message.text)
    sent = bot.send_message(message.from_user.id,
                            '–í–≤–µ–¥–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è –≤ –±—É–¥—É—â–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–∞:')
    bot.register_next_step_handler(sent, add_dream_notes)


def add_dream_notes(message):
    write_to_broker(message.text)
    sent = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–Ω–∞:',
                            reply_markup=marcup_category)
    bot.register_next_step_handler(sent, add_dream_category)


def add_dream_category(message):
    write_to_broker(message.text)
    sent = bot.send_message(message.from_user.id, '–ë—ã–ª –ª–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π —Å–æ–Ω:',
                            reply_markup=marcup_phase)
    bot.register_next_step_handler(sent, add_dream_phase)


def add_dream_phase(message):
    write_to_broker(message.text)
    bot.send_photo(message.from_user.id, random.choice(images))
    bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à —Å–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!',
                     reply_markup=marcup_start)

    with open('files/broker.txt', encoding='utf-8') as file:
        dream_name, dream_story, dream_notes, dream_category, dream_phase = file.read().split(
            '</next>')[:-1]
    current_date = date.today()
    con = sqlite3.connect('files/database.sqlite')
    cur = con.cursor()
    cur.execute(
        f"insert into user_dreams (dream_name, dream_story, dream_notes, dream_category, dream_phase, dream_date) values ('{dream_name}', '{dream_story}', '{dream_notes}', '{dream_phase}', '{dream_category}', '{current_date}')")
    con.commit()


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    req = call.data
    bot.delete_message(call.message.chat.id, call.message.message_id)

    con = sqlite3.connect('files/database.sqlite')
    cur = con.cursor()
    all_dreams = cur.execute('select dream_name from user_dreams').fetchall()

    marcup = types.InlineKeyboardMarkup()
    button_1 = types.InlineKeyboardButton(text='–º–µ–Ω—é',
                                          callback_data='**menu')
    button_2 = types.InlineKeyboardButton(text='–∏—Å—Ç–æ—Ä–∏—è',
                                          callback_data='**history')
    button_3 = types.InlineKeyboardButton(text='–∏–∑–º–µ–Ω–∏—Ç—å',
                                          callback_data='**update')
    button_4 = types.InlineKeyboardButton(text='—É–¥–∞–ª–∏—Ç—å',
                                          callback_data='**delete_all')
    marcup.add(button_1, button_2, button_4, button_3)

    if req == '**menu':
        menu(call)
    elif req == '**history':
        history(call)

    elif req == '**delete_all':
        marcup = types.InlineKeyboardMarkup()
        marcup.add(
            types.InlineKeyboardButton(text='‚úÖ',
                                       callback_data='**delete_dream'),
            types.InlineKeyboardButton(text='‚ùå',
                                       callback_data='**no_delete_dream'))
        bot.send_message(call.from_user.id,
                         '‚ö† –¢—ã –ø—Ä–∞–≤–¥–∞ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á—É–¥–µ—Å–Ω—ã–π —Å–æ–Ω?',
                         reply_markup=marcup)
    elif req == '**delete_dream':
        with open('files/broker.txt', encoding='utf-8') as file:
            dream_name = file.read()
        with open('files/broker.txt', 'w') as file:
            file.write('')
        cur.execute(
            f'delete from user_dreams where dream_name == "{dream_name}"')
        con.commit()
        bot.send_message(call.from_user.id,
                         f'–°–æ–Ω "{dream_name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!')
        history(call)
    elif req == '**no_delete_dream':
        history(call)

    elif req == '**delete':
        con = sqlite3.connect('files/database.sqlite')
        cur = con.cursor()
        cur.execute('delete from user_dreams')
        cur.execute('delete from user_info')
        con.commit()
        bot.send_message(call.from_user.id,
                         '–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!')
        menu(call)
    elif req == '**no_delete':
        menu(call)
    elif req == '**update':
        marcup = types.InlineKeyboardMarkup()
        marcup.add(
            types.InlineKeyboardButton(text='–Ω–∞–∑–≤–∞–Ω–∏–µ',
                                       callback_data='change**dream_name'),
            types.InlineKeyboardButton(text='—Å—é–∂–µ—Ç',
                                       callback_data='change**dream_story'),
            types.InlineKeyboardButton(text='—Ñ–∞–∑–∞',
                                       callback_data='change**dream_phase'),
            types.InlineKeyboardButton(text='–∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã',
                                       callback_data='change**dream_notes'))

        bot.send_message(call.from_user.id,
                         '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?',
                         reply_markup=marcup)
    elif 'change**' in req:
        with open('files/broker.txt', encoding='utf-8') as file:
            name = file.read()
        param = req.replace('change**', '')

        with open('files/broker2.txt', 'w', encoding='utf-8') as file:
            file.write(name + '</next>' + param)

        sent = bot.send_message(call.from_user.id, '–ú–µ–Ω—è–π:')
        bot.register_next_step_handler(sent, dream_update)

    else:
        for dream in all_dreams:
            if dream[0] == req:
                dream_info = cur.execute(
                    f'select * from user_dreams where dream_name == "{req}"').fetchall()
                os = '‚úÖ' if dream_info[0][3].lower() in ['–¥–∞',
                                                         '–∫–æ–Ω–µ—á–Ω–æ'] else '‚ùå'
                print(dream_info)
                bot.send_message(call.from_user.id,
                                 f'üí§ \t <i>{dream_info[0][0]}</i> \t üí§ \n\n <b>‚ûô –°—é–∂–µ—Ç: \t </b> {dream_info[0][1]} \n\n <b>‚ûô –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: \t </b> {dream_info[0][2]} \n\n <b>‚ûô –ö–∞—Ç–µ–≥–æ—Ä—è: \t </b> {dream_info[0][4]} \n\n <b>‚ûô –û—Å–æ–∑–Ω–∞–Ω–Ω—ã–π —Å–æ–Ω: \t </b> {os} \n\n {dream_info[0][5]}',
                                 parse_mode='html', reply_markup=marcup)
                with open('files/broker.txt', 'w', encoding='utf-8') as file:
                    file.write(req)
                break


def history(message):
    con = sqlite3.connect('files/database.sqlite')
    cur = con.cursor()
    all_dreams = cur.execute('select dream_name from user_dreams').fetchall()

    marcup = types.InlineKeyboardMarkup()
    for dream in all_dreams:
        button = types.InlineKeyboardButton(text=dream[0],
                                            callback_data=dream[0])
        marcup.add(button)
    if len(all_dreams) != 0:
        bot.send_message(message.from_user.id,
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–Ω–æ–≤: <i>{len(all_dreams)}</i>',
                         reply_markup=marcup, parse_mode="html")
    else:
        bot.send_message(message.from_user.id, f'–¢–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–æ–≤ –ø—É—Å—Ç',
                         reply_markup=marcup_start)


def menu(message):
    bot.send_message(message.from_user.id, '–õ–æ–≤–∏ –º–µ–Ω—é',
                     reply_markup=marcup_start)


def dream_update(message):
    with open('files/broker2.txt', encoding='utf-8') as file:
        name, param = file.read().split('</next>')
        print(name, param)
    con = sqlite3.connect('files/database.sqlite')
    cur = con.cursor()
    cur.execute(
        f'update user_dreams set "{param}" = "{message.text}" where dream_name == "{name}"')
    con.commit()
    bot.send_message(message.from_user.id, '–ì–æ—Ç–æ–≤–æ!')
    history(message)


bot.polling(none_stop=True, interval=0)
